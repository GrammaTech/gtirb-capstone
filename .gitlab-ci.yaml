variables:
  GTIRB_BRANCH: master
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: clone
  FORMATTER_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/formatter'
  BUILD_IMAGE_NAME: '${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/build'

stages:
  - build-images
  - check-format
  - test
  - build
  - test_package
  - deploy
  - cleanup

default:
  image: $DOCKER_REGISTRY/rewriting/gtirb-capstone
  tags: [cluster]
  before_script:
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/$GTIRB_BRANCH/download?job=debian-installer-ubuntu18 --output "gtirb-artifacts.zip" && unzip gtirb-artifacts.zip
    - dpkg -i python3-gtirb.deb

check-format:
  stage: check-format
  script:
    - pre-commit run --all-files

test:
  stage: test
  script:
    - tox

build:
  stage: build
  artifacts:
    paths:
    - dist/gtirb_capstone-?.?.?-py3-none-any.whl
    expire_in: 1 weeks
  script:
    - python3 setup.py sdist bdist_wheel

test_package:
  needs: [build]
  variables:
    GIT_STRATEGY: none
  stage: test_package
  script:
    - for f in dist/*.whl; do python3 -m pip install $f; done

pypi:
  stage: deploy
  only:
    - master
  script:
    - python3 setup.py develop
    - VERSION=$(python3 -c "import gtirb_capstone; print(gtirb_capstone.__version__)")
    - RESPONSE_CODE=$(curl -Ls -o /dev/null -w "%{http_code}" https://pypi.org/project/gtirb-capstone/${VERSION}/)
    - if [ "$RESPONSE_CODE" = "404" ];
      then
        pip3 install twine --upgrade;
        python3 setup.py sdist bdist_wheel;
        twine check dist/*;
        twine upload dist/* -u __token__ -p $PYPI_API_KEY;
      fi
